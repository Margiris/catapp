{"version":3,"sources":["components/TopMenu.js","components/Post.js","components/PostList.js","components/PostWithComments.js","components/UserList.js","App.js","serviceWorker.js","index.js"],"names":["TopMenu","props","handleItemClick","e","name","setState","activeItem","state","this","class","Menu","pointing","secondary","Item","header","active","onClick","position","React","Component","Post","post","console","log","datetime_difference","Date","now","posted_on","Card","fluid","className","Content","Header","to","id","title","Image","src","href","ui","Meta","author","extra","Icon","comment_count","PostList","posts","fetch","then","response","json","data","Container","style","marginTop","marginBottom","map","key","PostWithComments","UserList","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd25ab91.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\n\r\nclass TopMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { activeItem: \"home\" };\r\n    }\r\n\r\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name });\r\n\r\n    render() {\r\n        const { activeItem } = this.state;\r\n\r\n        return (\r\n            <div class=\"sticky\">\r\n                <Menu pointing secondary>\r\n                    <Menu.Item header>CatPic</Menu.Item>\r\n                    <Menu.Item\r\n                        name=\"home\"\r\n                        active={activeItem === \"home\"}\r\n                        onClick={this.handleItemClick}\r\n                    />\r\n                    <Menu.Item\r\n                        name=\"my profile\"\r\n                        active={activeItem === \"messages\"}\r\n                        onClick={this.handleItemClick}\r\n                    />\r\n                    <Menu.Menu position=\"right\">\r\n                        <Menu.Item\r\n                            name=\"logout\"\r\n                            active={activeItem === \"logout\"}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                    </Menu.Menu>\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopMenu;\r\n","import React from \"react\";\r\nimport { Image, Card, Icon } from \"semantic-ui-react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Post extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            post: props.post\r\n        };\r\n        console.log(props);\r\n    }\r\n\r\n    render() {\r\n        var datetime_difference =\r\n            Date.now() - new Date(this.state.post.posted_on);\r\n\r\n        return (\r\n            <Card fluid className=\"Card\">\r\n                <Card.Content>\r\n                    <Card.Header>\r\n                        <NavLink\r\n                            to={\"/post/\" + this.state.post.id}\r\n                            className=\"a\"\r\n                        >\r\n                            {this.state.post.title}\r\n                        </NavLink>\r\n                    </Card.Header>\r\n                </Card.Content>\r\n                <Image\r\n                    src=\"http://hdqwalls.com/wallpapers/cat-green-eyes-4k-i8.jpg\"\r\n                    href={\"/post/\" + this.state.post.id}\r\n                    ui={false}\r\n                />\r\n                <Card.Content>\r\n                    <Card.Meta>\r\n                        <span className=\"time\">\r\n                            <NavLink\r\n                                to={\"/user/\" + this.state.post.author}\r\n                                className=\"a\"\r\n                            >\r\n                                {this.state.post.author}\r\n                            </NavLink>\r\n                            {\" Â· \"}\r\n                            {datetime_difference}\r\n                        </span>\r\n                    </Card.Meta>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <NavLink to={\"/post/\" + this.state.post.id}>\r\n                        <Icon name=\"comments\" />\r\n                        {this.state.post.comment_count} comments\r\n                    </NavLink>\r\n                </Card.Content>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\n\r\nimport Post from \"./Post\";\r\n\r\nclass PostList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"http://catpicAPI.margiris.site:5000/post\").then(response =>\r\n            response.json().then(data => {\r\n                this.setState({ posts: data.posts });\r\n            })\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container style={{ marginTop: 30, marginBottom: 40 }}>\r\n                {this.state.posts.map(post => {\r\n                    return <Post key={post.id} post={post} />;\r\n                })}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostList;\r\n","import React from \"react\";\r\n\r\nclass PostWithComments extends React.Component {\r\n    render() {\r\n        return <div>test post with comments</div>;\r\n    }\r\n}\r\n\r\nexport default PostWithComments;\r\n","import React from \"react\";\r\n\r\nexport default class UserList extends React.Component {\r\n    render() {\r\n        return <div>test</div>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nimport TopMenu from \"./components/TopMenu\";\r\nimport PostList from \"./components/PostList\";\r\nimport PostWithComments from \"./components/PostWithComments\";\r\nimport UserList from \"./components/UserList\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <TopMenu />\r\n            <BrowserRouter>\r\n                <Route exact path=\"/\" component={PostList} />\r\n                <Route path=\"/post/:post_id\" component={PostWithComments} />\r\n                <Route path=\"/user/:name\" component={UserList} />\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}